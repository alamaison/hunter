# Copyright (c) 2013, Ruslan Baratov
# All rights reserved.

if(DEFINED HUNTER_CMAKE_HUNTER_)
  return()
else()
  set(HUNTER_CMAKE_HUNTER_ 1)
endif()

option(HUNTER_ENABLED "Enable Hunter package manager support" ON)
option(HUNTER_STATUS_PRINT "Print working status" ON)
option(HUNTER_STATUS_DEBUG "Print a lot info" OFF)

# If HUNTER_ROOT is defined by user, check it is correct.
# Note: it can't be defined by other Hunter master file
# because of header guards
if(HUNTER_ROOT)
  get_filename_component(HUNTER_ROOT_OLD "${HUNTER_ROOT}" ABSOLUTE)
endif()

# https://github.com/ruslo/hunter/wiki/EP_BASE-layout
if(HUNTER_SHA1)
  # Installed by gate (i.e. HUNTER_ROOT/_Base/SHA1/Self/cmake/Hunter)
  get_filename_component(
      HUNTER_ROOT
      "${CMAKE_CURRENT_LIST_DIR}/../../../.."
      ABSOLUTE
  )
else()
  # Installed manually (i.e. HUNTER_ROOT/cmake/Hunter)
  get_filename_component(HUNTER_ROOT "${CMAKE_CURRENT_LIST_DIR}/.." ABSOLUTE)
endif()

### Directory with hunter sources
get_filename_component(HUNTER_SELF "${CMAKE_CURRENT_LIST_DIR}/.." ABSOLUTE)

### test self
if(NOT EXISTS "${HUNTER_SELF}/cmake/Hunter")
  # Emulate 'hunter_fatal_error'
  message("[hunter ** FATAL ERROR **] Master file not found")
  message("[hunter ** FATAL ERROR **] HUNTER_SELF: `${HUNTER_SELF}`")
  message(
      "[hunter ** FATAL ERROR **] Expected location: <HUNTER_SELF>/cmake/Hunter"
  )
  message("[hunter ** FATAL ERROR **] [Directory:${CMAKE_CURRENT_LIST_DIR}]")
  message("")
  message("------------------------------ WIKI -------------------------------")
  message("    https://github.com/ruslo/hunter/wiki/Error-%28master-file-not-found%29")
  message("-------------------------------------------------------------------")
  message(FATAL_ERROR "")
endif()

### add cmake modules to search path
list(APPEND CMAKE_MODULE_PATH "${HUNTER_SELF}/cmake/modules")
list(APPEND CMAKE_MODULE_PATH "${HUNTER_SELF}/cmake/find")

include(hunter_status_debug)
include(hunter_status_print)
include(hunter_internal_error)

if(HUNTER_ROOT_OLD)
  string(COMPARE NOTEQUAL "${HUNTER_ROOT_OLD}" "${HUNTER_ROOT}" HUNTER_RESULT)
  if(HUNTER_RESULT)
    hunter_internal_error(
        "Incorrent HUNTER_ROOT directories:\n"
        "defined: ${HUNTER_ROOT_OLD}\n"
        "real: ${HUNTER_ROOT}"
    )
  endif()
  unset(HUNTER_RESULT)
endif()

unset(HUNTER_ROOT_OLD)

if(CYGWIN)
  # Make generator has problems with windows paths

  # HUNTER_ROOT
  execute_process(
      COMMAND
      cygpath
      --absolute
      "${HUNTER_ROOT}"
      OUTPUT_VARIABLE
      HUNTER_ROOT
      RESULT_VARIABLE
      _hunter_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT _hunter_result EQUAL 0)
    hunter_internal_error("cygpath failed")
  endif()

  # HUNTER_SELF
  execute_process(
      COMMAND
      cygpath
      --absolute
      "${HUNTER_SELF}"
      OUTPUT_VARIABLE
      HUNTER_SELF
      RESULT_VARIABLE
      _hunter_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT _hunter_result EQUAL 0)
    hunter_internal_error("cygpath failed")
  endif()
endif()

if(NOT HUNTER_BASE)
  if(HUNTER_SHA1)
    set(HUNTER_BASE "${HUNTER_ROOT}/_Base/${HUNTER_SHA1}")
  else()
    set(HUNTER_BASE "${HUNTER_ROOT}/_Base")
  endif()
endif()

if(NOT HUNTER_PROJECT_ROOT)
  set(HUNTER_PROJECT_ROOT "${HUNTER_SELF}")
endif()

get_filename_component(HUNTER_BASE "${HUNTER_BASE}" ABSOLUTE)

if(HUNTER_PACKAGE_DOWNLOAD_DIR)
  get_filename_component(
      HUNTER_PACKAGE_DOWNLOAD_DIR "${HUNTER_PACKAGE_DOWNLOAD_DIR}" ABSOLUTE
  )
endif()

hunter_status_print("HUNTER_ROOT: ${HUNTER_ROOT}")
hunter_status_print("HUNTER_SELF: ${HUNTER_SELF}")
hunter_status_debug("HUNTER_BASE: ${HUNTER_BASE}")
hunter_status_debug("HUNTER_PROJECT_ROOT: ${HUNTER_PROJECT_ROOT}")

if(HUNTER_PACKAGE_DOWNLOAD_DIR)
  hunter_status_debug(
      "HUNTER_PACKAGE_DOWNLOAD_DIR: ${HUNTER_PACKAGE_DOWNLOAD_DIR}"
  )
endif()

### Check 'EP_BASE` correctness
get_directory_property(HUNTER_EP_BASE_OLD EP_BASE)

if(HUNTER_EP_BASE_OLD)
  hunter_internal_error("EP_BASE directory property already set")
endif()

unset(HUNTER_EP_BASE_OLD)

set_directory_properties(
    PROPERTIES
    EP_BASE
    "${HUNTER_BASE}"
)

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
  hunter_status_debug(
      "CMAKE_DEBUG_POSTFIX is empty, set to '${CMAKE_DEBUG_POSTFIX}'"
  )
endif()

if(NOT HUNTER_INSTALL_TAG)
  if(MSVC)
    string(REPLACE "Visual Studio" "vs" HUNTER_INSTALL_TAG "${CMAKE_GENERATOR}")
    string(REPLACE " " "-" HUNTER_INSTALL_TAG "${HUNTER_INSTALL_TAG}")
    string(TOLOWER "${HUNTER_INSTALL_TAG}" HUNTER_INSTALL_TAG)
  elseif(MINGW)
    set(HUNTER_INSTALL_TAG "mingw")
  elseif(CYGWIN)
    set(HUNTER_INSTALL_TAG "cygwin")
  else()
    set(HUNTER_INSTALL_TAG "default")
  endif()
  hunter_status_debug(
      "HUNTER_INSTALL_TAG is empty, set to '${HUNTER_INSTALL_TAG}'"
  )
endif()

if(MSVC)
  include(hunter_setup_msvc_arch)
  include(hunter_setup_msvc_vcvarsall)
  hunter_setup_msvc_arch()
  hunter_setup_msvc_vcvarsall()
endif()

### Cache default cmake generator
include(hunter_set_cmake_default_generator)
hunter_set_cmake_default_generator()

if(HUNTER_ENABLED)
  set(HUNTER_LOCK_PATH "${HUNTER_BASE}/directory-lock")
  include(hunter_verify_toolchain_info)
  hunter_verify_toolchain_info()

  ### 1. Clear all '<NAME>_ROOT' variables (cache, environment, ...)
  ### 2. Set '<NAME>_ROOT' or 'HUNTER_<name>_VERSION' variables
  include("${HUNTER_PROJECT_ROOT}/cmake/config.cmake")
else()
  hunter_status_print("DISABLED")
endif()
